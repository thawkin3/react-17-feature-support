{"version":3,"sources":["component-lifecycle-methods/ChildExample1.js","component-lifecycle-methods/ChildExample2.js","component-lifecycle-methods/ChildExample3.js","component-lifecycle-methods/ComponentLifecyclesDemo.js","App.js","reportWebVitals.js","index.js"],"names":["ChildExample1","props","console","group","log","groupEnd","state","clickCount","incrementCounter","bind","nextProps","nextState","this","prevProps","prevState","snapshot","setState","className","style","background","backgroundColor","type","onClick","Component","ChildExample2","ChildExample3","ComponentLifecyclesDemo","showChildComponent1","showChildComponent2","showChildComponent3","backgroundColorForChild","toggleChildComponent1","toggleChildComponent2","toggleChildComponent3","inputChangeHandler","e","target","value","href","rel","htmlFor","id","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.930561ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ChildExample.css';\n\nexport class ChildExample1 extends Component {\n    /*\n     * Called before the component mounts\n     * Use the constructor to initialize your state, bind \"this\" to any of your methods you need to\n     * DON'T use the constructor to perform any side effects. Use componentDidMount for side effects.\n     *\n     * Some info about super():\n     *      https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\n     *      http://cheng.logdown.com/posts/2016/03/26/683329\n     */\n    constructor(props) {\n        console.group('constructor');\n        super(props);\n        console.log('props:', props);\n        console.log('this.props:', this.props);\n        console.groupEnd();\n\n        this.state = {\n            clickCount: 0,\n        };\n\n        this.incrementCounter = this.incrementCounter.bind(this);\n    }\n\n    /*\n     * Called before the component mounts (called after the constructor)\n     * This is deprecated.\n     */\n    componentWillMount() {\n        console.group('componentWillMount');\n        console.groupEnd();\n    }\n\n    /*\n     * Called after the component mounts (after the render method is called for the first time)\n     * Use componentDidMount to work with the DOM (only if needed!) or to make AJAX requests\n     */\n    componentDidMount() {\n        console.group('componentDidMount');\n        console.groupEnd();\n    }\n\n    /*\n     * Use componentWillReceiveProps to compare the current props and the next props and update state if needed\n     * This is deprecated.\n     */\n    componentWillReceiveProps(nextProps) {\n        console.group('componentWillReceiveProps');\n        console.log('nextProps:', nextProps);\n        console.groupEnd();\n    }\n\n    /*\n     * Use shouldComponentUpdate to control whether the render method should be called\n     * Return either true (the default) or false\n     * Generally you don't need to use this, so just let React do its thing and decide for you when things should be updated\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        console.group('shouldComponentUpdate');\n        console.log('this.props:', this.props, 'nextProps:', nextProps, 'this.state:', this.state, 'nextState:', nextState);\n        console.groupEnd();\n        return true;\n    }\n\n    /*\n     * componentWillUpdate is called just before rendering when new props or state are being received\n     * This is deprecated and is going away with React v17\n     */\n    componentWillUpdate(nextProps, nextState) {\n        console.group('componentWillUpdate');\n        console.log('this.props:', this.props, 'nextProps:', nextProps, 'this.state:', this.state, 'nextState:', nextState);\n        console.groupEnd();\n    }\n\n    /*\n     * componentDidUpdate is called immediately after an update occurs\n     * Use componentDidUpdate to work on the DOM or to make AJAX requests (very similar to componentDidMount)\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.group('componentDidUpdate');\n        console.log('prevProps:', prevProps, 'this.props:', this.props, 'prevState:', prevState, 'this.state:', this.state, 'snapshot:', snapshot);\n        console.groupEnd();\n    }\n\n    /*\n     * componentWillUnmount is called immediately before a component is removed from the DOM\n     * This is a good place to do any cleanup like clearing out any timers or intervals you may have set\n    */\n    componentWillUnmount() {\n        console.group('componentWillUnmount');\n        console.groupEnd();\n    }\n\n    /*\n     * Increments the counter as an example of working with state\n     */\n    incrementCounter() {\n        console.log(this);\n        this.setState(prevState => ({\n            clickCount: prevState.clickCount + 1,\n        }));\n    }\n\n    /*\n     * Renders your content to the DOM\n     */\n    render() {\n        console.group('render');\n        console.groupEnd();\n        return (\n            <div className=\"ChildExample\" style={{ background: `${this.props.backgroundColor}` }}>\n                <p>I'm the first example child component. I'm just a div. I use legacy lifecycle methods without the \"UNSAFE_\" prefix.</p>\n                <p>This is the background color prop I've received from my parent: {this.props.backgroundColor}</p>\n                <div>\n                    <button type=\"button\" onClick={this.incrementCounter}>Click me to increment the counter</button>\n                </div>\n                <p>Click count: {this.state.clickCount}</p>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './ChildExample.css';\n\nexport class ChildExample2 extends Component {\n    /*\n     * Called before the component mounts\n     * Use the constructor to initialize your state, bind \"this\" to any of your methods you need to\n     * DON'T use the constructor to perform any side effects. Use componentDidMount for side effects.\n     *\n     * Some info about super():\n     *      https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\n     *      http://cheng.logdown.com/posts/2016/03/26/683329\n     */\n    constructor(props) {\n        console.group('constructor');\n        super(props);\n        console.log('props:', props);\n        console.log('this.props:', this.props);\n        console.groupEnd();\n\n        this.state = {\n            clickCount: 0,\n        };\n\n        this.incrementCounter = this.incrementCounter.bind(this);\n    }\n\n    /*\n     * Called before the component mounts (called after the constructor)\n     * This is deprecated.\n     */\n    UNSAFE_componentWillMount() {\n        console.group('UNSAFE_componentWillMount');\n        console.groupEnd();\n    }\n\n    /*\n     * Called after the component mounts (after the render method is called for the first time)\n     * Use componentDidMount to work with the DOM (only if needed!) or to make AJAX requests\n     */\n    componentDidMount() {\n        console.group('componentDidMount');\n        console.groupEnd();\n    }\n\n    /*\n     * Use UNSAFE_componentWillReceiveProps to compare the current props and the next props and update state if needed\n     * This is deprecated.\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        console.group('UNSAFE_componentWillReceiveProps');\n        console.log('nextProps:', nextProps);\n        console.groupEnd();\n    }\n\n    /*\n     * Use shouldComponentUpdate to control whether the render method should be called\n     * Return either true (the default) or false\n     * Generally you don't need to use this, so just let React do its thing and decide for you when things should be updated\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        console.group('shouldComponentUpdate');\n        console.log('this.props:', this.props, 'nextProps:', nextProps, 'this.state:', this.state, 'nextState:', nextState);\n        console.groupEnd();\n        return true;\n    }\n\n    /*\n     * UNSAFE_componentWillUpdate is called just before rendering when new props or state are being received\n     * This is deprecated and is going away with React v17\n     */\n    UNSAFE_componentWillUpdate(nextProps, nextState) {\n        console.group('UNSAFE_componentWillUpdate');\n        console.log('this.props:', this.props, 'nextProps:', nextProps, 'this.state:', this.state, 'nextState:', nextState);\n        console.groupEnd();\n    }\n\n    /*\n     * componentDidUpdate is called immediately after an update occurs\n     * Use componentDidUpdate to work on the DOM or to make AJAX requests (very similar to componentDidMount)\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.group('componentDidUpdate');\n        console.log('prevProps:', prevProps, 'this.props:', this.props, 'prevState:', prevState, 'this.state:', this.state, 'snapshot:', snapshot);\n        console.groupEnd();\n    }\n\n    /*\n     * componentWillUnmount is called immediately before a component is removed from the DOM\n     * This is a good place to do any cleanup like clearing out any timers or intervals you may have set\n    */\n    componentWillUnmount() {\n        console.group('componentWillUnmount');\n        console.groupEnd();\n    }\n\n    /*\n     * Increments the counter as an example of working with state\n     */\n    incrementCounter() {\n        console.log(this);\n        this.setState(prevState => ({\n            clickCount: prevState.clickCount + 1,\n        }));\n    }\n\n    /*\n     * Renders your content to the DOM\n     */\n    render() {\n        console.group('render');\n        console.groupEnd();\n        return (\n            <div className=\"ChildExample\" style={{ background: `${this.props.backgroundColor}` }}>\n                <p>I'm the second example child component. I'm just a div. I use legacy lifecycle methods with the \"UNSAFE_\" prefix.</p>\n                <p>This is the background color prop I've received from my parent: {this.props.backgroundColor}</p>\n                <div>\n                    <button type=\"button\" onClick={this.incrementCounter}>Click me to increment the counter</button>\n                </div>\n                <p>Click count: {this.state.clickCount}</p>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './ChildExample.css';\n\nexport class ChildExample3 extends Component {\n    /*\n     * Called before the component mounts\n     * Use the constructor to initialize your state, bind \"this\" to any of your methods you need to\n     * DON'T use the constructor to perform any side effects. Use componentDidMount for side effects.\n     *\n     * Some info about super():\n     *      https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\n     *      http://cheng.logdown.com/posts/2016/03/26/683329\n     */\n    constructor(props) {\n        console.group('constructor');\n        super(props);\n        console.log('props:', props);\n        console.log('this.props:', this.props);\n        console.groupEnd();\n\n        this.state = {\n            clickCount: 0,\n        };\n\n        this.incrementCounter = this.incrementCounter.bind(this);\n    }\n\n    /*\n     * Called after the component mounts (after the render method is called for the first time)\n     * Use componentDidMount to work with the DOM (only if needed!) or to make AJAX requests\n     */\n    componentDidMount() {\n        console.group('componentDidMount');\n        console.groupEnd();\n    }\n\n    /*\n     * Use shouldComponentUpdate to control whether the render method should be called\n     * Return either true (the default) or false\n     * Generally you don't need to use this, so just let React do its thing and decide for you when things should be updated\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        console.group('shouldComponentUpdate');\n        console.log('this.props:', this.props, 'nextProps:', nextProps, 'this.state:', this.state, 'nextState:', nextState);\n        console.groupEnd();\n        return true;\n    }\n\n    /*\n     * Use getDerivedStateFromProps to return a new state object in response to prop changes\n     * Return null if no changes to state are needed\n     * This can essentially be used in place of componentWillMount and componentWillReceiveProps if you need to update state\n     */\n    static getDerivedStateFromProps(nextProps, prevState) {\n        console.group('getDerivedStateFromProps');\n        console.log('nextProps:', nextProps, 'prevState:', prevState);\n        console.groupEnd();\n        return null;\n    }\n\n    /*\n     * getSnapshotBeforeUpdate is called just before the new content is rendered to the DOM\n     * Use it to capture current values and then pass them into the componentDidUpdate lifecycle hook\n     * Return null for no data, or an object (or any data type, really) for whatever data you want to store\n     * This can essentially be used in place of componentWillUpdate\n     */\n    getSnapshotBeforeUpdate() {\n        console.group('getSnapshotBeforeUpdate');\n        console.groupEnd();\n        return null;\n    }\n\n    /*\n     * componentDidUpdate is called immediately after an update occurs\n     * Use componentDidUpdate to work on the DOM or to make AJAX requests (very similar to componentDidMount)\n     */\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.group('componentDidUpdate');\n        console.log('prevProps:', prevProps, 'this.props:', this.props, 'prevState:', prevState, 'this.state:', this.state, 'snapshot:', snapshot);\n        console.groupEnd();\n    }\n\n    /*\n     * componentWillUnmount is called immediately before a component is removed from the DOM\n     * This is a good place to do any cleanup like clearing out any timers or intervals you may have set\n    */\n    componentWillUnmount() {\n        console.group('componentWillUnmount');\n        console.groupEnd();\n    }\n\n    /*\n     * Increments the counter as an example of working with state\n     */\n    incrementCounter() {\n        console.log(this);\n        this.setState(prevState => ({\n            clickCount: prevState.clickCount + 1,\n        }));\n    }\n\n    /*\n     * Renders your content to the DOM\n     */\n    render() {\n        console.group('render');\n        console.groupEnd();\n        return (\n            <div className=\"ChildExample\" style={{ background: `${this.props.backgroundColor}` }}>\n                <p>I'm the third example child component. I'm just a div. I don't use any legacy lifecycle methods and instead use new lifecycle methods like getDerivedStateFromProps and getSnapshotBeforeUpdate.</p>\n                <p>This is the background color prop I've received from my parent: {this.props.backgroundColor}</p>\n                <div>\n                    <button type=\"button\" onClick={this.incrementCounter}>Click me to increment the counter</button>\n                </div>\n                <p>Click count: {this.state.clickCount}</p>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport { ChildExample1 } from './ChildExample1';\nimport { ChildExample2 } from './ChildExample2';\nimport { ChildExample3 } from './ChildExample3';\n\nexport class ComponentLifecyclesDemo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showChildComponent1: false,\n            showChildComponent2: false,\n            showChildComponent3: false,\n            backgroundColorForChild: '',\n        };\n\n        this.toggleChildComponent1 = this.toggleChildComponent1.bind(this);\n        this.toggleChildComponent2 = this.toggleChildComponent2.bind(this);\n        this.toggleChildComponent3 = this.toggleChildComponent3.bind(this);\n        this.inputChangeHandler = this.inputChangeHandler.bind(this);\n    }\n\n    toggleChildComponent1() {\n        this.setState(prevState => ({\n            showChildComponent1: !prevState.showChildComponent1,\n        }));\n    }\n\n    toggleChildComponent2() {\n        this.setState(prevState => ({\n            showChildComponent2: !prevState.showChildComponent2,\n        }));\n    }\n\n    toggleChildComponent3() {\n        this.setState(prevState => ({\n            showChildComponent3: !prevState.showChildComponent3,\n        }));\n    }\n\n    inputChangeHandler(e) {\n        this.setState({\n            backgroundColorForChild: e.target.value,\n        });\n    }\n\n    render() {\n    return (\n        <div className=\"section\">\n            <header>\n                <h2>React Component Lifecycle Hooks</h2>\n            </header>\n\n            <div>\n                <p>Open up your JavaScript Console to see what's logged as you interact with the app.</p>\n                <p>The <a href=\"https://reactjs.org/docs/react-component.html\" target=\"_blank\" rel=\"noopener noreferrer\">React Component documentation</a> will be incredibly helpful in understanding the inner-workings of React.</p>\n            </div>\n\n            <div className=\"buttonContainer container\">\n                <button type=\"button\" onClick={this.toggleChildComponent1}>Toggle showing Child Component 1</button>\n                <button type=\"button\" onClick={this.toggleChildComponent2}>Toggle showing Child Component 2</button>\n                <button type=\"button\" onClick={this.toggleChildComponent3}>Toggle showing Child Component 3</button>\n            </div>\n\n            <div className=\"inputContainer container\">\n                <label htmlFor=\"backgroundColorInput\">Background color for child component: </label>\n                <input id=\"backgroundColorInput\" type=\"text\" value={this.state.backgroundColorForChild} onChange={this.inputChangeHandler} />\n            </div>\n\n            { this.state.showChildComponent1 && <ChildExample1 backgroundColor={this.state.backgroundColorForChild} /> }\n            { this.state.showChildComponent2 && <ChildExample2 backgroundColor={this.state.backgroundColorForChild} /> }\n            { this.state.showChildComponent3 && <ChildExample3 backgroundColor={this.state.backgroundColorForChild} /> }\n        </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { ComponentLifecyclesDemo } from './component-lifecycle-methods/ComponentLifecyclesDemo';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <h1>React 17 App</h1>\n      <ComponentLifecyclesDemo />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}