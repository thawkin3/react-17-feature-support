{"version":3,"sources":["component-lifecycle-methods/ChildExample1.js","component-lifecycle-methods/ChildExample2.js","component-lifecycle-methods/ChildExample3.js","component-lifecycle-methods/ComponentLifecyclesDemo.js","refs/CallbackRefDemo.js","refs/CreateRefDemo.js","refs/LegacyStringRefDemo.js","refs/UseRefDemo.js","refs/RefsDemo.js","App.js","reportWebVitals.js","index.js"],"names":["ChildExample1","props","console","group","log","groupEnd","state","clickCount","incrementCounter","bind","nextProps","nextState","this","prevProps","prevState","snapshot","setState","className","style","background","backgroundColor","type","onClick","Component","ChildExample2","ChildExample3","ComponentLifecyclesDemo","showChildComponent1","showChildComponent2","showChildComponent3","backgroundColorForChild","toggleChildComponent1","toggleChildComponent2","toggleChildComponent3","inputChangeHandler","e","target","value","href","rel","htmlFor","id","onChange","CallbackRefDemo","textInput","setTextInputRef","element","focusTextInput","focus","ref","CreateRefDemo","createRef","current","LegacyStringRefDemo","refs","UseRefDemo","useRef","RefsDemo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba43480c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ChildExample.css';\n\nexport class ChildExample1 extends Component {\n  /*\n   * Called before the component mounts\n   * Use the constructor to initialize your state, bind \"this\" to any of your methods you need to\n   * DON'T use the constructor to perform any side effects. Use componentDidMount for side effects.\n   *\n   * Some info about super():\n   *      https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\n   *      http://cheng.logdown.com/posts/2016/03/26/683329\n   */\n  constructor(props) {\n    console.group('constructor');\n    super(props);\n    console.log('props:', props);\n    console.log('this.props:', this.props);\n    console.groupEnd();\n\n    this.state = {\n      clickCount: 0,\n    };\n\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  /*\n   * Called before the component mounts (called after the constructor)\n   * This is deprecated.\n   */\n  componentWillMount() {\n    console.group('componentWillMount');\n    console.groupEnd();\n  }\n\n  /*\n   * Called after the component mounts (after the render method is called for the first time)\n   * Use componentDidMount to work with the DOM (only if needed!) or to make AJAX requests\n   */\n  componentDidMount() {\n    console.group('componentDidMount');\n    console.groupEnd();\n  }\n\n  /*\n   * Use componentWillReceiveProps to compare the current props and the next props and update state if needed\n   * This is deprecated.\n   */\n  componentWillReceiveProps(nextProps) {\n    console.group('componentWillReceiveProps');\n    console.log('nextProps:', nextProps);\n    console.groupEnd();\n  }\n\n  /*\n   * Use shouldComponentUpdate to control whether the render method should be called\n   * Return either true (the default) or false\n   * Generally you don't need to use this, so just let React do its thing and decide for you when things should be updated\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    console.group('shouldComponentUpdate');\n    console.log(\n      'this.props:',\n      this.props,\n      'nextProps:',\n      nextProps,\n      'this.state:',\n      this.state,\n      'nextState:',\n      nextState\n    );\n    console.groupEnd();\n    return true;\n  }\n\n  /*\n   * componentWillUpdate is called just before rendering when new props or state are being received\n   * This is deprecated and is going away with React v17\n   */\n  componentWillUpdate(nextProps, nextState) {\n    console.group('componentWillUpdate');\n    console.log(\n      'this.props:',\n      this.props,\n      'nextProps:',\n      nextProps,\n      'this.state:',\n      this.state,\n      'nextState:',\n      nextState\n    );\n    console.groupEnd();\n  }\n\n  /*\n   * componentDidUpdate is called immediately after an update occurs\n   * Use componentDidUpdate to work on the DOM or to make AJAX requests (very similar to componentDidMount)\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.group('componentDidUpdate');\n    console.log(\n      'prevProps:',\n      prevProps,\n      'this.props:',\n      this.props,\n      'prevState:',\n      prevState,\n      'this.state:',\n      this.state,\n      'snapshot:',\n      snapshot\n    );\n    console.groupEnd();\n  }\n\n  /*\n   * componentWillUnmount is called immediately before a component is removed from the DOM\n   * This is a good place to do any cleanup like clearing out any timers or intervals you may have set\n   */\n  componentWillUnmount() {\n    console.group('componentWillUnmount');\n    console.groupEnd();\n  }\n\n  /*\n   * Increments the counter as an example of working with state\n   */\n  incrementCounter() {\n    console.log(this);\n    this.setState((prevState) => ({\n      clickCount: prevState.clickCount + 1,\n    }));\n  }\n\n  /*\n   * Renders your content to the DOM\n   */\n  render() {\n    console.group('render');\n    console.groupEnd();\n    return (\n      <div\n        className=\"ChildExample\"\n        style={{ background: `${this.props.backgroundColor}` }}\n      >\n        <p>\n          I'm the first example child component. I'm just a div. I use legacy\n          lifecycle methods without the \"UNSAFE_\" prefix.\n        </p>\n        <p>\n          This is the background color prop I've received from my parent:{' '}\n          {this.props.backgroundColor}\n        </p>\n        <div>\n          <button type=\"button\" onClick={this.incrementCounter}>\n            Click me to increment the counter\n          </button>\n        </div>\n        <p>Click count: {this.state.clickCount}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './ChildExample.css';\n\nexport class ChildExample2 extends Component {\n  /*\n   * Called before the component mounts\n   * Use the constructor to initialize your state, bind \"this\" to any of your methods you need to\n   * DON'T use the constructor to perform any side effects. Use componentDidMount for side effects.\n   *\n   * Some info about super():\n   *      https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\n   *      http://cheng.logdown.com/posts/2016/03/26/683329\n   */\n  constructor(props) {\n    console.group('constructor');\n    super(props);\n    console.log('props:', props);\n    console.log('this.props:', this.props);\n    console.groupEnd();\n\n    this.state = {\n      clickCount: 0,\n    };\n\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  /*\n   * Called before the component mounts (called after the constructor)\n   * This is deprecated.\n   */\n  UNSAFE_componentWillMount() {\n    console.group('UNSAFE_componentWillMount');\n    console.groupEnd();\n  }\n\n  /*\n   * Called after the component mounts (after the render method is called for the first time)\n   * Use componentDidMount to work with the DOM (only if needed!) or to make AJAX requests\n   */\n  componentDidMount() {\n    console.group('componentDidMount');\n    console.groupEnd();\n  }\n\n  /*\n   * Use UNSAFE_componentWillReceiveProps to compare the current props and the next props and update state if needed\n   * This is deprecated.\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    console.group('UNSAFE_componentWillReceiveProps');\n    console.log('nextProps:', nextProps);\n    console.groupEnd();\n  }\n\n  /*\n   * Use shouldComponentUpdate to control whether the render method should be called\n   * Return either true (the default) or false\n   * Generally you don't need to use this, so just let React do its thing and decide for you when things should be updated\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    console.group('shouldComponentUpdate');\n    console.log(\n      'this.props:',\n      this.props,\n      'nextProps:',\n      nextProps,\n      'this.state:',\n      this.state,\n      'nextState:',\n      nextState\n    );\n    console.groupEnd();\n    return true;\n  }\n\n  /*\n   * UNSAFE_componentWillUpdate is called just before rendering when new props or state are being received\n   * This is deprecated and is going away with React v17\n   */\n  UNSAFE_componentWillUpdate(nextProps, nextState) {\n    console.group('UNSAFE_componentWillUpdate');\n    console.log(\n      'this.props:',\n      this.props,\n      'nextProps:',\n      nextProps,\n      'this.state:',\n      this.state,\n      'nextState:',\n      nextState\n    );\n    console.groupEnd();\n  }\n\n  /*\n   * componentDidUpdate is called immediately after an update occurs\n   * Use componentDidUpdate to work on the DOM or to make AJAX requests (very similar to componentDidMount)\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.group('componentDidUpdate');\n    console.log(\n      'prevProps:',\n      prevProps,\n      'this.props:',\n      this.props,\n      'prevState:',\n      prevState,\n      'this.state:',\n      this.state,\n      'snapshot:',\n      snapshot\n    );\n    console.groupEnd();\n  }\n\n  /*\n   * componentWillUnmount is called immediately before a component is removed from the DOM\n   * This is a good place to do any cleanup like clearing out any timers or intervals you may have set\n   */\n  componentWillUnmount() {\n    console.group('componentWillUnmount');\n    console.groupEnd();\n  }\n\n  /*\n   * Increments the counter as an example of working with state\n   */\n  incrementCounter() {\n    console.log(this);\n    this.setState((prevState) => ({\n      clickCount: prevState.clickCount + 1,\n    }));\n  }\n\n  /*\n   * Renders your content to the DOM\n   */\n  render() {\n    console.group('render');\n    console.groupEnd();\n    return (\n      <div\n        className=\"ChildExample\"\n        style={{ background: `${this.props.backgroundColor}` }}\n      >\n        <p>\n          I'm the second example child component. I'm just a div. I use legacy\n          lifecycle methods with the \"UNSAFE_\" prefix.\n        </p>\n        <p>\n          This is the background color prop I've received from my parent:{' '}\n          {this.props.backgroundColor}\n        </p>\n        <div>\n          <button type=\"button\" onClick={this.incrementCounter}>\n            Click me to increment the counter\n          </button>\n        </div>\n        <p>Click count: {this.state.clickCount}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './ChildExample.css';\n\nexport class ChildExample3 extends Component {\n  /*\n   * Called before the component mounts\n   * Use the constructor to initialize your state, bind \"this\" to any of your methods you need to\n   * DON'T use the constructor to perform any side effects. Use componentDidMount for side effects.\n   *\n   * Some info about super():\n   *      https://stackoverflow.com/questions/30571875/whats-the-difference-between-super-and-superprops-in-react-when-using-e\n   *      http://cheng.logdown.com/posts/2016/03/26/683329\n   */\n  constructor(props) {\n    console.group('constructor');\n    super(props);\n    console.log('props:', props);\n    console.log('this.props:', this.props);\n    console.groupEnd();\n\n    this.state = {\n      clickCount: 0,\n    };\n\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  /*\n   * Called after the component mounts (after the render method is called for the first time)\n   * Use componentDidMount to work with the DOM (only if needed!) or to make AJAX requests\n   */\n  componentDidMount() {\n    console.group('componentDidMount');\n    console.groupEnd();\n  }\n\n  /*\n   * Use shouldComponentUpdate to control whether the render method should be called\n   * Return either true (the default) or false\n   * Generally you don't need to use this, so just let React do its thing and decide for you when things should be updated\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    console.group('shouldComponentUpdate');\n    console.log(\n      'this.props:',\n      this.props,\n      'nextProps:',\n      nextProps,\n      'this.state:',\n      this.state,\n      'nextState:',\n      nextState\n    );\n    console.groupEnd();\n    return true;\n  }\n\n  /*\n   * Use getDerivedStateFromProps to return a new state object in response to prop changes\n   * Return null if no changes to state are needed\n   * This can essentially be used in place of componentWillMount and componentWillReceiveProps if you need to update state\n   */\n  static getDerivedStateFromProps(nextProps, prevState) {\n    console.group('getDerivedStateFromProps');\n    console.log('nextProps:', nextProps, 'prevState:', prevState);\n    console.groupEnd();\n    return null;\n  }\n\n  /*\n   * getSnapshotBeforeUpdate is called just before the new content is rendered to the DOM\n   * Use it to capture current values and then pass them into the componentDidUpdate lifecycle hook\n   * Return null for no data, or an object (or any data type, really) for whatever data you want to store\n   * This can essentially be used in place of componentWillUpdate\n   */\n  getSnapshotBeforeUpdate() {\n    console.group('getSnapshotBeforeUpdate');\n    console.groupEnd();\n    return null;\n  }\n\n  /*\n   * componentDidUpdate is called immediately after an update occurs\n   * Use componentDidUpdate to work on the DOM or to make AJAX requests (very similar to componentDidMount)\n   */\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.group('componentDidUpdate');\n    console.log(\n      'prevProps:',\n      prevProps,\n      'this.props:',\n      this.props,\n      'prevState:',\n      prevState,\n      'this.state:',\n      this.state,\n      'snapshot:',\n      snapshot\n    );\n    console.groupEnd();\n  }\n\n  /*\n   * componentWillUnmount is called immediately before a component is removed from the DOM\n   * This is a good place to do any cleanup like clearing out any timers or intervals you may have set\n   */\n  componentWillUnmount() {\n    console.group('componentWillUnmount');\n    console.groupEnd();\n  }\n\n  /*\n   * Increments the counter as an example of working with state\n   */\n  incrementCounter() {\n    console.log(this);\n    this.setState((prevState) => ({\n      clickCount: prevState.clickCount + 1,\n    }));\n  }\n\n  /*\n   * Renders your content to the DOM\n   */\n  render() {\n    console.group('render');\n    console.groupEnd();\n    return (\n      <div\n        className=\"ChildExample\"\n        style={{ background: `${this.props.backgroundColor}` }}\n      >\n        <p>\n          I'm the third example child component. I'm just a div. I don't use any\n          legacy lifecycle methods and instead use new lifecycle methods like\n          getDerivedStateFromProps and getSnapshotBeforeUpdate.\n        </p>\n        <p>\n          This is the background color prop I've received from my parent:{' '}\n          {this.props.backgroundColor}\n        </p>\n        <div>\n          <button type=\"button\" onClick={this.incrementCounter}>\n            Click me to increment the counter\n          </button>\n        </div>\n        <p>Click count: {this.state.clickCount}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { ChildExample1 } from './ChildExample1';\nimport { ChildExample2 } from './ChildExample2';\nimport { ChildExample3 } from './ChildExample3';\n\nexport class ComponentLifecyclesDemo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showChildComponent1: false,\n      showChildComponent2: false,\n      showChildComponent3: false,\n      backgroundColorForChild: '',\n    };\n\n    this.toggleChildComponent1 = this.toggleChildComponent1.bind(this);\n    this.toggleChildComponent2 = this.toggleChildComponent2.bind(this);\n    this.toggleChildComponent3 = this.toggleChildComponent3.bind(this);\n    this.inputChangeHandler = this.inputChangeHandler.bind(this);\n  }\n\n  toggleChildComponent1() {\n    this.setState((prevState) => ({\n      showChildComponent1: !prevState.showChildComponent1,\n    }));\n  }\n\n  toggleChildComponent2() {\n    this.setState((prevState) => ({\n      showChildComponent2: !prevState.showChildComponent2,\n    }));\n  }\n\n  toggleChildComponent3() {\n    this.setState((prevState) => ({\n      showChildComponent3: !prevState.showChildComponent3,\n    }));\n  }\n\n  inputChangeHandler(e) {\n    this.setState({\n      backgroundColorForChild: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"section\">\n        <h2>React Component Lifecycle Methods</h2>\n\n        <div>\n          <p>\n            Open up your JavaScript Console to see what's logged as you interact\n            with the app.\n          </p>\n          <p>\n            The{' '}\n            <a\n              href=\"https://reactjs.org/docs/react-component.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              React Component documentation\n            </a>{' '}\n            will be incredibly helpful in understanding the inner workings of\n            React.\n          </p>\n        </div>\n\n        <div className=\"buttonContainer container\">\n          <button type=\"button\" onClick={this.toggleChildComponent1}>\n            Toggle showing Child Component 1\n          </button>\n          <button type=\"button\" onClick={this.toggleChildComponent2}>\n            Toggle showing Child Component 2\n          </button>\n          <button type=\"button\" onClick={this.toggleChildComponent3}>\n            Toggle showing Child Component 3\n          </button>\n        </div>\n\n        <div className=\"inputContainer container\">\n          <label htmlFor=\"backgroundColorInput\">\n            Background color for child component:{' '}\n          </label>\n          <input\n            id=\"backgroundColorInput\"\n            type=\"text\"\n            value={this.state.backgroundColorForChild}\n            onChange={this.inputChangeHandler}\n          />\n        </div>\n\n        {this.state.showChildComponent1 && (\n          <ChildExample1 backgroundColor={this.state.backgroundColorForChild} />\n        )}\n        {this.state.showChildComponent2 && (\n          <ChildExample2 backgroundColor={this.state.backgroundColorForChild} />\n        )}\n        {this.state.showChildComponent3 && (\n          <ChildExample3 backgroundColor={this.state.backgroundColorForChild} />\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class CallbackRefDemo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.textInput = null;\n\n    this.setTextInputRef = (element) => {\n      this.textInput = element;\n    };\n\n    this.focusTextInput = () => {\n      if (this.textInput) {\n        this.textInput.focus();\n      }\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Callback Ref</h3>\n        <label>\n          Username\n          <input type=\"text\" ref={this.setTextInputRef} />\n        </label>\n        <button type=\"button\" onClick={this.focusTextInput}>\n          Focus the text input\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component, createRef } from 'react';\n\nexport class CreateRefDemo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.textInput = createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    this.textInput.current.focus();\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>React.createRef()</h3>\n        <label>\n          Username\n          <input type=\"text\" ref={this.textInput} />\n        </label>\n        <button type=\"button\" onClick={this.focusTextInput}>\n          Focus the text input\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component, createRef } from 'react';\n\nexport class LegacyStringRefDemo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.textInput = createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    this.refs.textInput.focus();\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Legacy String Ref</h3>\n        <label>\n          Username\n          <input type=\"text\" ref=\"textInput\" />\n        </label>\n        <button type=\"button\" onClick={this.focusTextInput}>\n          Focus the text input\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { useRef } from 'react';\n\nexport function UseRefDemo() {\n  const textInput = useRef(null);\n\n  function focusTextInput() {\n    textInput.current.focus();\n  }\n\n  return (\n    <div>\n      <h3>useRef Hook</h3>\n      <label>\n        Username\n        <input type=\"text\" ref={textInput} />\n      </label>\n      <button type=\"button\" onClick={focusTextInput}>\n        Focus the text input\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { CallbackRefDemo } from './CallbackRefDemo';\nimport { CreateRefDemo } from './CreateRefDemo';\nimport { LegacyStringRefDemo } from './LegacyStringRefDemo';\nimport { UseRefDemo } from './UseRefDemo';\n\nexport const RefsDemo = () => {\n  return (\n    <div className=\"section\">\n      <h2>Refs</h2>\n      <p>\n        <a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs</a> can be\n        created several different ways.\n      </p>\n      <p>\n        React.createRef() and the useRef hook are the current recommended\n        approaches. Callback refs are discouraged, and string refs are\n        deprecated.\n      </p>\n      <CreateRefDemo />\n      <UseRefDemo />\n      <CallbackRefDemo />\n      <LegacyStringRefDemo />\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { ComponentLifecyclesDemo } from './component-lifecycle-methods/ComponentLifecyclesDemo';\nimport { RefsDemo } from './refs/RefsDemo';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <h1>React 17 App</h1>\n      <ComponentLifecyclesDemo />\n      <RefsDemo />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}